[tox]
envlist = py,typing,lint,coverage-report
isolated_build = True

[docker:postgres]
image = postgres:latest
environment =
    POSTGRES_PASSWORD=INSECURE-PASSWORD
    POSTGRES_USER=vo-cutouts
    POSTGRES_DB=vo-cutouts
# The healthcheck ensures that tox-docker won't run tests until the
# container is up and the command finishes with exit code 0 (success)
healthcheck_cmd = PGPASSWORD=$POSTGRES_PASSWORD psql \
    --user=$POSTGRES_USER --dbname=$POSTGRES_DB \
    --host=127.0.0.1 --quiet --no-align --tuples-only \
    -1 --command="SELECT 1"
healthcheck_timeout = 1
healthcheck_retries = 30
healthcheck_interval = 1
healthcheck_start_period = 1

[docker:redis]
image = redis:latest
healthcheck_cmd =
    redis-cli ping
healthcheck_timeout = 1
healthcheck_retries = 30
healthcheck_interval = 1
healthcheck_start_period = 1

[testenv]
description = Run pytest against {envname}.
deps =
    -r{toxinidir}/requirements/main.txt
    -r{toxinidir}/requirements/dev.txt

[testenv:coverage-report]
description = Compile coverage from each test run.
skip_install = true
deps = coverage[toml]>=5.0.2
depends =
    py
commands = coverage report

[testenv:py]
description = Run pytest with PostgreSQL and Redis via Docker.
docker =
    postgres
    redis
commands =
    pytest -vv --timeout=60 --cov=vocutouts --cov-branch --cov-report= {posargs}
setenv =
    CUTOUT_DATABASE_URL = postgresql://vo-cutouts@localhost/vo-cutouts
    CUTOUT_DATABASE_PASSWORD = INSECURE-PASSWORD
    CUTOUT_ARQ_QUEUE_URL = redis://localhost/0
    CUTOUT_SERVICE_ACCOUNT = vo-cutouts@example.com
    CUTOUT_SLACK_WEBHOOK = https://example.com/fake-webhook
    CUTOUT_STORAGE_URL = s3://some-bucket
    POSTGRES_USER = vo-cutouts
    POSTGRES_DB = vo-cutouts
    POSTGRES_PASSWORD = INSECURE-PASSWORD

[testenv:lint]
description = Lint codebase by running pre-commit.
skip_install = true
deps =
    pre-commit
commands = pre-commit run --all-files

[testenv:typing]
description = Run mypy.
commands =
    mypy src/vocutouts tests
